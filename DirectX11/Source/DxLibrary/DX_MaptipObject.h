//#ifndef __DX_MAPTIP_OBJECT_H_
//#define __DX_MAPTIP_OBJECT_H_
//
////------------------------------------------------------------------------------
////
//// マップチップ専用
//// 2DObjectをインスタンス描画する
//// 画像サイズが大きいほど描画負荷がかかるので、そこには気を付けて下さい
//// 今は座標のz値で描画するかしないかを決めてる
//// テクスチャは「ファイル名_No]でナンバリングで読みます。
//// 指定する画像のファイル名は_Noを抜いた部分を指定してください。
//// ナンバリングの数値は1から始まります。
//// 例
//// aaaaaa_1.png aaaaaa_2.png aaaaaa_3.png
////
////------------------------------------------------------------------------------
//class DX_MaptipObject
//{
//public:
//	//------------------------------------------------------------------------------
//	//
//	//  @brief		メンバー変数を初期化
//	//
//	//------------------------------------------------------------------------------
//	DX_MaptipObject();
//
//	//------------------------------------------------------------------------------
//	//
//	//  @brief		デストラクタ
//	//
//	//------------------------------------------------------------------------------
//	~DX_MaptipObject();
//
//	bool Initialize(const char* pFilepath, const unsigned int splitCountX, const unsigned int splitCountY, const DirectX::XMFLOAT2& renderSize);
//
//	//------------------------------------------------------------------------------
//	//
//	//  @brief		座標一覧を取得する
//	//	@return		座標一覧
//	//
//	//------------------------------------------------------------------------------
//	DirectX::XMFLOAT3* GetPosList();
//
//	//------------------------------------------------------------------------------
//	//
//	//  @brief		座標一覧を取得する
//	//	@param[in]	index 指定した箇所からの座標一覧を取得する
//	//	@return		座標一覧
//	//
//	//------------------------------------------------------------------------------
//	DirectX::XMFLOAT3* GetPosList(const unsigned int y, const unsigned int x);
//
//	//------------------------------------------------------------------------------
//	//
//	//  @brief		描画する
//	//
//	//------------------------------------------------------------------------------
//	bool Render();
//
//	//------------------------------------------------------------------------------
//	//
//	//  @brief		指定した番号のオブジェクトの無効化する（描画されなくなる）
//	//
//	//------------------------------------------------------------------------------
//	void Disable(const size_t index);
//
//	//------------------------------------------------------------------------------
//	//
//	//  @brief		インタンス描画を行うわないようにする
//	//
//	//------------------------------------------------------------------------------
//	void Disable();
//
//	//------------------------------------------------------------------------------
//	//
//	//  @brief		指定した番号のオブジェクトの有効化する（描画されるようになる）
//	//
//	//------------------------------------------------------------------------------
//	void Enable(const size_t index);
//
//	//------------------------------------------------------------------------------
//	//
//	//  @brief		インタンス描画を行うようにする
//	//
//	//------------------------------------------------------------------------------
//	void Enable();
//
//	//------------------------------------------------------------------------------
//	//
//	//  @brief		指定したインスタンスが無効かどうか
//	//	@return		無効かどうか
//	//
//	//------------------------------------------------------------------------------
//	bool IsDisable(const size_t index) const;
//
//	//------------------------------------------------------------------------------
//	//
//	//  @brief		指定したインスタンスが有効かどうか
//	//	@return		有効化どうか
//	//
//	//------------------------------------------------------------------------------
//	bool IsEnable(const size_t index) const;
//
//	//------------------------------------------------------------------------------
//	//
//	//  @brief		指定したインスタンスが無効かどうか
//	//	@return		無効かどうか
//	//
//	//------------------------------------------------------------------------------
//	bool IsDisable() const;
//
//	//------------------------------------------------------------------------------
//	//
//	//  @brief		指定したインスタンスが有効かどうか
//	//	@return		有効化どうか
//	//
//	//------------------------------------------------------------------------------
//	bool IsEnable() const;
//private:
//	//	テクスチャ情報
//	ID3D11ShaderResourceView*		m_pShaderResourceView;
//	// 頂点情報
//	ID3D11Buffer* m_pVertexBuffer;
//
//	// テクスチャのサイズ
//	size_t m_width;
//	size_t m_height;
//
//	unsigned int m_splitCountX;
//	unsigned int m_splitCountY;
//
//	// インスタンス数
//	UINT m_instanceNum;
//
//	// インスタンスの座標リスト
//	DirectX::XMFLOAT3* m_pPosList;
//
//	// 有効かどうか
//	bool m_enabled;
//
//	//------------------------------------------------------------------------------
//	//
//	//  @brief		テクスチャを読み込む
//	//	@param[in]	pFilepath	テクスチャのファイルパス
//	//
//	//------------------------------------------------------------------------------
//	bool LoadTexture(const char* pFilepath);
//};
//
//#endif // !__DX_MAPTIP_OBJECT_H_
