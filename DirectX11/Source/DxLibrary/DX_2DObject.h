#ifndef __DX_2DOBJECT_H_
#define __DX_2DOBJECT_H_


//****************************************************************************************************
//
//	Object2D
//
//****************************************************************************************************
class DX_2DObject : public DX_GameObject
{
public:
	//------------------------------------------------------------------------------
	//
	//  @brief		メンバー変数の初期化
	//
	//------------------------------------------------------------------------------
	DX_2DObject();

	//------------------------------------------------------------------------------
	//
	//  @brief		m_pShaderResourceViewを解放
	//
	//------------------------------------------------------------------------------
	virtual ~DX_2DObject();

	//------------------------------------------------------------------------------
	//
	//  @brief		テクスチャ読み込みと頂点バッファの作成を行う。
	//	@param[in]	pFilepath	テクスチャのファイルパス
	//	@return		どちらかの作成に失敗でfalse
	//
	//------------------------------------------------------------------------------
	bool Initialize(const char* pFilepath);

	//------------------------------------------------------------------------------
	//
	//  @brief		テクスチャ読み込みと頂点バッファの作成を行う。
	//	@param[in]	pFilepath	テクスチャのファイルパス
	//	@param[in]	rectPos		描画するサイズ
	//	@return		どちらかの作成に失敗でfalse
	//
	//------------------------------------------------------------------------------
	bool Initialize(const char* pFilepath, const DX::tagRect& rectPos);

	//------------------------------------------------------------------------------
	//
	//  @brief		テクスチャ読み込みと頂点バッファの作成を行う。
	//	@param[in]	pFilepath	テクスチャのファイルパス
	//	@param[in]	rectPos		描画するサイズ
	//	@param[in]	uv			描画するテクスチャ座標
	//	@return		どちらかの作成に失敗でfalse
	//
	//------------------------------------------------------------------------------
	bool Initialize(const char* pFilepath, const DX::tagRect& rectPos, const DX::tagRect& uv);

	//------------------------------------------------------------------------------
	//
	//  @brief		テクスチャの高さを取得する
	//
	//------------------------------------------------------------------------------
	unsigned int GetHeight()const;

	//------------------------------------------------------------------------------
	//
	//  @brief		テクスチャの幅を取得する
	//
	//------------------------------------------------------------------------------
	unsigned int GetWidth()const;

	//------------------------------------------------------------------------------
	//
	//  @brief		描画する
	//	@return		描画に成功したかどうか
	//
	//------------------------------------------------------------------------------
	bool Render();

	//------------------------------------------------------------------------------
	//
	//  @brief		複製する
	//	@return		複製したオブジェクト
	//
	//------------------------------------------------------------------------------
	DX_2DObject* Clone();

	//------------------------------------------------------------------------------
	//
	//  @brief		オブジェクトが複製したものかどうか
	//	@return		オブジェクトが複製したものならtrue
	//
	//------------------------------------------------------------------------------
	bool IsClone() const;

	//------------------------------------------------------------------------------
	//
	//  @brief		オブジェクトがオリジナルかどうか
	//	@return		オブジェクトがオリジナルならtrue
	//
	//------------------------------------------------------------------------------
	bool IsOriginal() const;

	//------------------------------------------------------------------------------
	//
	//  @brief		画面内に描画されているかどうか
	//	@param[in]	描画されているならtrue
	//
	//------------------------------------------------------------------------------
	bool IsInScreen() const;

	//------------------------------------------------------------------------------
	//
	//  @brief		描画座標を設定する
	//	@param[in]	rect	描画範囲
	//
	//------------------------------------------------------------------------------
	void SetRectPos(const DX::tagRect& rect);
	
	//------------------------------------------------------------------------------
	//
	//  @brief		描画座標を設定する
	//	@param[in]	left	左
	//	@param[in]	top		上
	//	@param[in]	right	右
	//	@param[in]	bottom	下
	//
	//------------------------------------------------------------------------------
	void SetRectPos(const float left, const float top, const float right, const float bottom);

	//------------------------------------------------------------------------------
	//
	//  @brief		UV座標を設定する
	//	@param[in]	uv		UV座標
	//
	//------------------------------------------------------------------------------
	void SetUV(const DX::tagRect& uv);

	//------------------------------------------------------------------------------
	//
	//  @brief		UV座標を設定する
	//	@param[in]	left	左
	//	@param[in]	top		上
	//	@param[in]	right	右
	//	@param[in]	bottom	下
	//
	//------------------------------------------------------------------------------
	void SetUV(const float left, const float top, const float right, const float bottom);

	//------------------------------------------------------------------------------
	//
	//  @brief		描画座標を取得する
	//	@return		描画座標
	//
	//------------------------------------------------------------------------------
	DX::tagRect GetRectPos() const;

	//------------------------------------------------------------------------------
	//
	//  @brief		UV座標を取得する
	//	@return		UV座標
	//
	//------------------------------------------------------------------------------
	DX::tagRect GetUV() const;

	//------------------------------------------------------------------------------
	//
	//  @brief		頂点情報を更新する
	//	@param[in]	isLRMirror	左右反転描画するかどうか
	//	@param[in]	isUDMirror	上下反転描画するかどうか
	//
	//------------------------------------------------------------------------------
	void Update(const bool isLRMirror = false, const bool isUDMirror = false);

protected:
	DX::tagRect m_rectPos;
	DX::tagRect m_uv;

private:
	ID3D11Buffer*				m_pVertexBuffer;
	ID3D11ShaderResourceView*	m_pShaderResourceView;
	unsigned int m_height;
	unsigned int m_width;
	bool m_isCloned;
	bool m_isChanged;
	bool m_isLRMirror;
	bool m_isUDMirror;

	//------------------------------------------------------------------------------
	//
	//  @brief		テクスチャ読み込みと頂点バッファの作成を行う。
	//	@param[in]	pFilepath	テクスチャのファイルパス
	//	@return		どちらかの作成に失敗でfalse
	//
	//------------------------------------------------------------------------------
	bool CommonInitialize(const char* pFilepath);

	//------------------------------------------------------------------------------
	//
	//  @brief		テクスチャを読み込む
	//	@param[in]	pFilepath	テクスチャのファイルパス
	//	@return		テクスチャの読み込みの成否
	//
	//------------------------------------------------------------------------------
	bool LoadTexture(const char* pFilepath);

	//------------------------------------------------------------------------------
	//
	//  @brief		頂点情報を作成する
	//	@param[in]	pContext	コンテキスト
	//	@param[in]	rectPos		画面に描画する範囲	
	//	@param[in]	uv			描画する画像の範囲
	//	@param[in]	isLRMirror	左右反転するかどうか
	//	@param[in]	isUDMirror	上下反転するかどうか
	//
	//------------------------------------------------------------------------------
	void CreateVertex(ID3D11DeviceContext* pContext, const DX::tagRect& rectPos, const DX::tagRect& uv, const bool isLRMirror = false, const bool isUDMirror = false);
};

#endif // !__DX_2DOBJECT_H_
