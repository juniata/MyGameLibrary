#ifndef __DX_DEBUG_H_
#define __DX_DEBUG_H_

//	コンソール画面に出力する文字の色
enum class SET_PRINT_COLOR : int {
	BLUE,		//	青色
	RED,		//	赤色
	GREEN,		//	緑	
	DEFAULT,	//	初期の色
};


//****************************************************************************************************
//
//	debug時のみ、値チェックをする。
//
//****************************************************************************************************
#if defined(DEBUG) || defined(_DEBUG)
template<class T> bool __DebugValueCheck(T value, const char* pErrMsg)
{
	bool result = value ? true : false;
	
	if (result == false) {
		// TODO:文字化けを直す
		MessageBox(NULL, pErrMsg,  "Error", MB_OK);
	}

	return result;
}
#define DEBUG_VALUE_CHECK(value, pErrMsg) if (false ==__DebugValueCheck(value, pErrMsg)) { return false; }
#else
#define DEBUG_VALUE_CHECK(bFlag,pMessage)
#endif

//****************************************************************************************************
//
//	DX_Debug
//
//****************************************************************************************************
class DX_Debug
{
public:
	//------------------------------------------------------------------------------
	//
	//  @brief		解放
	//
	//------------------------------------------------------------------------------
	~DX_Debug();

	//------------------------------------------------------------------------------
	//
	//  @brief		インスタンスを取得する
	//
	//------------------------------------------------------------------------------
	static DX_Debug* GetInstance();

	//------------------------------------------------------------------------------
	//
	//  @brief		メンバ変数の初期化を行う
	//
	//------------------------------------------------------------------------------
	void Initialize();

	//------------------------------------------------------------------------------
	//
	//  @brief		メンバ変数の解放を行う
	//
	//------------------------------------------------------------------------------
	static void Release();

	//------------------------------------------------------------------------------
	//
	//  @brief		ID3D系の生存オブジェクトを調査する
	//
	//------------------------------------------------------------------------------
	void ReportLiveDeviceObjects(const char* pMessage);

	//------------------------------------------------------------------------------
	//
	//  @brief		戻り値をチェックする
	//	@param[in]	hr	さまざまな関数の戻り値(D3D系)
	//	@retrun		true:成功	false:失敗
	//
	//------------------------------------------------------------------------------
	bool IsHresultCheck(HRESULT hr);

	//------------------------------------------------------------------------------
	//
	//  @brief		シェーダーファイルをチェック
	//	@param[in]	hr			D3DX11CompileFromFile()の戻り値
	//	@param[in]	pBytecord	D3DX11CompileFromFile()で出来たバイトコード
	//
	//------------------------------------------------------------------------------
	void CheckSourceCordOfShaderFile(HRESULT hr, ID3DBlob* pBytecord);

	//------------------------------------------------------------------------------
	//
	//  @brief		コンソール画面に出力する文字の色を設定
	//	@param[in]	printColor	SET_PRINT_COLOR
	//	
	//------------------------------------------------------------------------------
	void SetPrintColor(SET_PRINT_COLOR printColor);
	
	//------------------------------------------------------------------------------
	//
	//  @brief		コンソール画面に文字を出力する
	//	@param[in]	pFormat printfのラッパーなので同じ使い方
	//	@note		debug時のみ出力
	//	
	//------------------------------------------------------------------------------
	void Printf(const char* pFormat, ...);

private:
#if defined(DEBUG) || defined(_DEBUG)
	ID3D11Debug* m_pDebug;
	HANDLE	m_consoleHandle;
	CONSOLE_SCREEN_BUFFER_INFO m_csbi;
#endif

	static DX_Debug* m_pInstance;
	//------------------------------------------------------------------------------
	//
	//  @brief		初期化
	//
	//------------------------------------------------------------------------------
	DX_Debug();

	//------------------------------------------------------------------------------
	//
	//  @brief		m_pDebugを生成する
	//
	//------------------------------------------------------------------------------
	void CreateDebugDevice();


};
#endif // !__DX_DEBUG_H_
