#ifndef __DX_BOX_H_
#define __DX_BOX_H_


//****************************************************************************************************
//
//	ボタン機能
//	
//****************************************************************************************************
class DX_Box
{
public:
	//------------------------------------------------------------------------------
	//
	//  @brief		変数の初期化
	//
	//------------------------------------------------------------------------------
	DX_Box();

	//------------------------------------------------------------------------------
	//
	//  @brief		解放処理
	//
	//------------------------------------------------------------------------------
	~DX_Box();

	//------------------------------------------------------------------------------
	//
	//  @brief		バッファの作成を行う
	//
	//------------------------------------------------------------------------------
	bool Initialize();

	//------------------------------------------------------------------------------
	//
	//  @brief		座標を設定
	//	@param[in]	pos	座標
	//
	//------------------------------------------------------------------------------
	void SetPos(const DirectX::XMFLOAT3& pos);

	//------------------------------------------------------------------------------
	//
	//  @brief		大きさを設定
	//	@param[in]	scale 大きさ
	//
	//------------------------------------------------------------------------------
	void SetScale(const DirectX::XMFLOAT3& scale);

	//------------------------------------------------------------------------------
	//
	//  @brief		向きを設定
	//	@param[in]	angle 向き
	//
	//------------------------------------------------------------------------------
	void SetAngle(const DirectX::XMFLOAT3& angle);

	//------------------------------------------------------------------------------
	//
	//  @brief		座標を取得
	//	@return		座標
	//
	//------------------------------------------------------------------------------
	DirectX::XMFLOAT3 GetPos() const;

	//------------------------------------------------------------------------------
	//
	//  @brief		向きを取得
	//	@param[in]	向き
	//
	//------------------------------------------------------------------------------
	DirectX::XMFLOAT3 GetAngle() const;

	//------------------------------------------------------------------------------
	//
	//  @brief		大きさを取得設定
	//	@param[in]	大きさ
	//
	//------------------------------------------------------------------------------
	DirectX::XMFLOAT3 GetScale() const;

	//------------------------------------------------------------------------------
	//
	//  @brief		座標等を更新する
	//
	//------------------------------------------------------------------------------
	void Update();

	//------------------------------------------------------------------------------
	//
	//  @brief		描画する
	//
	//------------------------------------------------------------------------------
	void Render();

	//------------------------------------------------------------------------------
	//
	//  @brief		複製する
	//	@rereturn	複製したDX_Box
	//
	//------------------------------------------------------------------------------
	DX_Box* Clone();

	//------------------------------------------------------------------------------
	//
	//  @brief		オブジェクトが複製したものかどうか
	//	@rereturn	複製したものならtrue 
	//
	//------------------------------------------------------------------------------
	bool IsClone() const;

	//------------------------------------------------------------------------------
	//
	//  @brief		オブジェクトがオリジナルかどうか
	//	@rereturn	オリジナルならtrue
	//
	//------------------------------------------------------------------------------
	bool IsOriginal() const;

	//------------------------------------------------------------------------------
	//
	//  @brief		レイキャスト判定
	//
	//------------------------------------------------------------------------------
	bool RayCast(const DirectX::XMFLOAT3 pos);
private:
	//------------------------------------------------------------------------------
	//
	//  @brief		頂点バッファ等の作成を行う
	//	@preturn	バッファの作成の成否
	//
	//------------------------------------------------------------------------------
	bool CreateBuffer();

	//------------------------------------------------------------------------------
	//
	//  @brief		面法線を作成する
	//
	//------------------------------------------------------------------------------
	void CreateFaceNormal(DX::tagObjectVertext* pVertex);

	DirectX::XMVECTOR CalcTraiangleNormal(const DirectX::XMVECTOR& p0, const DirectX::XMVECTOR& p1, const DirectX::XMVECTOR& p2);

	//------------------------------------------------------------------------------
	//
	//  @brief		頂点法線を作成する
	//
	//------------------------------------------------------------------------------
	void CreateVertexNormal();

	enum BOX_INDEX : int {
		FRONT_LEFT_UP,
		FRONT_RIGHT_UP,
		FRONT_RIGHT_DOWN,
		FRONT_LEFT_DOWN,
		BACK_LEFT_UP,
		BACK_RIGHT_UP,
		BACK_RIGHT_DOWN,
		BACK_LEFT_DOWN,
	};

	static const float LEFT_POS;
	static const float RIGHT_POS;
	static const float UP_POS;
	static const float DOWN_POS;
	static const float FRONT_POS;
	static const float BACK_POS;


	ID3D11Buffer*	m_pVertexBuffer;
	ID3D11Buffer*	m_pIndexBuffer;
	ID3D11Buffer*	m_pConstantBuffer;

	DirectX::XMFLOAT3 m_pos;
	DirectX::XMFLOAT3 m_scale;
	DirectX::XMFLOAT3 m_angle;
	DirectX::XMFLOAT4X4 m_worldMat;

	bool m_isChanged;
	bool m_isCloned;

};
#endif // !__DX_BOX_H_
