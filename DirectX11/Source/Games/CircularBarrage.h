#ifndef __CIRCULARBARRAGE_H_
#define __CIRCULARBARRAGE_H_
class Bullet;

//****************************************************************************************************
//
//	CircularBarrage Class
//  円形に生成するタイプの弾幕クラス
//
//****************************************************************************************************
class CircularBarrage
{
public:
	CircularBarrage();
	~CircularBarrage();

	//------------------------------------------------------------------------------
	//
	//  @brief		更新処理
	//  @param[in]  angle		角度　設定する角度によって、弾の曲がり方が変化する
	//	@param[in]	distance	距離 設定する距離によって、弾の移動する距離が変化する
	//	@param[in]	pPosList	2Dインスタンスの座標リストを設定する(内部でインスタンスの座標を更新する)
	//	@detail		円形の弾幕を外側に移動させる。
	//				弾が画面外に行くと、描画・更新が行われないようになる
	//
	//------------------------------------------------------------------------------
	void Update(float angle, float distance, DirectX::XMFLOAT3* pPosList);

	//------------------------------------------------------------------------------
	//
	//  @brief		有効フラグセット
	//  @param[in]  isEnabled セットする有効フラグ(bool)
	//  @detail     引数の値によってUpdateとRenderの動作制御
	//
	//------------------------------------------------------------------------------
	void SetEnabled(bool isEnabled);

	//------------------------------------------------------------------------------
	//
	//  @brief		有効フラグセット
	//
	//------------------------------------------------------------------------------
	void Response();

	//------------------------------------------------------------------------------
	//
	//  @brief		弾の数を取得する
	//
	//------------------------------------------------------------------------------
	static int GetBulletNum();
private:
	// 生成する弾の数
	static const int BULLET_MAX = 12;

	// 弾リスト
	Bullet* m_pBulletList[CircularBarrage::BULLET_MAX];

	// 有効フラグ
	bool m_isEnabled;
};

#endif