#pragma once

class Stage;

//****************************************************************************************************
//
//	プレイヤーを管理するクラス
//
//****************************************************************************************************
class Player
{
public:
	//------------------------------------------------------------------------------
	//
	//  @brief		コンストラクタ　メンバ変数を初期化する
	//
	//------------------------------------------------------------------------------
	Player();

	//------------------------------------------------------------------------------
	//
	//  @brief		デストラクタ	メンバ変数を解放する
	//
	//------------------------------------------------------------------------------
	~Player();

	//------------------------------------------------------------------------------
	//
	//  @brief	オブジェクト等の生成を行う
	//	@param	initPost	初期座標
	//	@return 成否
	//
	//------------------------------------------------------------------------------
	bool Initialize(const DirectX::XMFLOAT2& initPos);

	//------------------------------------------------------------------------------
	//
	//  @brief	座標、行動を更新する
	//	@param	pStage	Stageポインタ
	//	@return 更新の成否
	//
	//------------------------------------------------------------------------------
	bool Update(Stage* pStage);

	//------------------------------------------------------------------------------
	//
	//  @brief	プレイヤーを描画する
	//	@return 描画の成否
	//
	//------------------------------------------------------------------------------
	bool Render();

private:
	// 基盤となるアニメーションタイプ
	enum class ANIMATION_TYPE : int {
		WAIT,
		WALK,
		ATTACK,
		JUMP,
		MAX,
	};
	// 待機モーショ
	enum class ANIMATION_WAIT_TYPE : int {
		WAIT1,
		MAX,
	};
	// 歩きモーション
	enum class ANIMATION_WALK_TYPE : int {
		WALK1,
		WALK2,
		MAX,
	};
	// 攻撃モーション
	enum class ANIMATION_ATTACK_TYPE : int {
		// 止まった状態で攻撃
		WAIT_ATTACK1,
		WAIT_ATTACK2,
		// 歩きながら攻撃
		WALK_ATTACK1,
		WALK_ATTACK2,
		MAX,
	};

	// ジャンプモーション
	enum class ANIMATION_JUMP_TYPE : int {
		// 止まった状態でジャンプ
		WAIT_JUMP_1,
		MAX,
	};

	// 行動タイプ
	enum class ACTION_TYPE : int {

		// 止まってる時のアクション
		WAIT,			// 待機
		WAIT_ATTACK_1,	// 止まって攻撃
		WAIT_JUMP_1,	// 止まってジャンプ

		// 歩いてる時のアクション
		WALK,			// 歩く
		WALK_ATTACK_1,	// 歩きながら攻撃
		WALK_JUMP,		// 歩きながらジャンプ
	};
	int m_animationType;
	int m_animationActionType;

	int m_animationWalkInterval;
	int m_animationAttackInterval;
	bool m_isAnimationMirror;
	ACTION_TYPE m_actionType;

	DX_2DObject** m_pObjects;

	DirectX::XMFLOAT2 m_pos;
	DirectX::XMFLOAT2 m_move;

	struct tagJump{
		float moveY;
		bool isJump;
		int interval;
	};
	tagJump m_jump;

	//------------------------------------------------------------------------------
	//
	//  @brief	移動処理
	//
	//------------------------------------------------------------------------------
	void Move();

	//------------------------------------------------------------------------------
	//
	//  @brief	衝突判定
	//	@param  pStage	Stageのポインタ
	//
	//------------------------------------------------------------------------------
	void Collision(Stage* pStage);

	//------------------------------------------------------------------------------
	//
	//  @brief	キー入力のいろうステート更新
	//
	//------------------------------------------------------------------------------
	void KeyUpdate();

	//------------------------------------------------------------------------------
	//
	//  @brief	待機
	//
	//------------------------------------------------------------------------------
	void Wait();

	//------------------------------------------------------------------------------
	//
	//  @brief	待機攻撃
	//
	//------------------------------------------------------------------------------
	void WaitAttack();

	//------------------------------------------------------------------------------
	//
	//  @brief	待機ジャンプ
	//
	//------------------------------------------------------------------------------
	void WaitJump();

	//------------------------------------------------------------------------------
	//
	//  @brief	歩き
	//
	//------------------------------------------------------------------------------
	void Walk();

	//------------------------------------------------------------------------------
	//
	//  @brief	歩き攻撃
	//
	//------------------------------------------------------------------------------
	void WalkAttack();

	//------------------------------------------------------------------------------
	//
	//  @brief	歩きジャンプ
	//
	//------------------------------------------------------------------------------
	void WalkJump();

	//------------------------------------------------------------------------------
	//
	//  @brief	アニメーションタイプを取得する
	//	@return	アニメーションタイプ
	//
	//------------------------------------------------------------------------------
	ANIMATION_TYPE GetAnimationType();

	//------------------------------------------------------------------------------
	//
	//  @brief	アニメーションタイプを設定する
	//	@param	type	アニメーションタイプ
	//	@param	type2	ANIMATION_〇〇_TYPE
	//
	//------------------------------------------------------------------------------
	template<class TYPE> void SetAnimationType(ANIMATION_TYPE type, TYPE type2);

};